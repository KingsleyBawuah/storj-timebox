openapi: "3.0.0"
info:
  title: Storj Timebox API
  version: "0.1"
  description: "A 'Time-box' API that allows users to upload/download files. \n Uploaded files can have limits specifying an expiration date and a limit on how many times they can be downloaded."
servers:
  - url: http://localhost:3000
    description: "Base URL for local development"
paths:
  /health:
    get:
      summary: "Health Check"
      description: "Endpoint for checking the health of the service."
      operationId: health
      responses:
        200:
          description: OK
  /file/{key}:
    get:
      summary: "Download a file"
      description: "Download a single file by it's key"
      operationId: downloadFile
      parameters:
        - in: path
          name: key
          description: "key of the file to download"
          examples:
            single:
              value: "cute-puppies.gif"
              summary: "Uploading a single file to the shared root folder"
            nested:
              value: "happiness/cute-puppies.gif"
              summary: "Uploading a single file to a nested folder."
              description: "Uploading files to a nested folder is supported. All files are uploaded to a shared root bucket"
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: "The file requested for download."
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: "File not found"
        default:
          description: "Unexpected Error"
  /file:
    post:
      summary: "Upload a file"
      description: "Uploads a file and specifies limits on the amount of times it can be downloaded and when it will expire."
      operationId: uploadFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                maxDownloads:
                  type: integer
                  example: 1337
                  description: "Integer value representing the amount of times this file can be downloaded. This value defaults to 25 if it is not specified."
                expires:
                  type: string
                  format: date-time
                  example: "2017-07-21T17:32:28Z"
                  description: "Date time value in RFC 3339 format that represents when the file will no longer be able to be downloaded.\n Example: \"2017-07-21T17:32:28Z\" \n Please see https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#rfc.section.5.6 for more information"
                file:
                  type: string
                  format: binary
                  description: "File in binary format"
              required:
                - maxDownloads
                - expires
                - file
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    type: string
                    description: "The key of the file, downloading from a nested folder is supported."
                    example: "cute-kitties.gif"
        400:
          description: "Invalid request format, please check the body of your request. This is commonly caused by not using RFC 3339 format for the expirationDateTime field."
        409:
          description: "A resource with this filename already exists"
        default:
          description: "Unexpected Error"